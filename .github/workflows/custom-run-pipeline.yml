name: run-pipeline

on:
  workflow_call:
    inputs:
      parameters-file:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      workspace_name:
        required: true
        type: string
      job-name:
        required: true
        type: string
    secrets:
      creds:
        required: true
jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          # Azure login can use either Service Principal or OIDC authentication:
          # 1. Service Principal: Uses client ID, tenant ID, client secret/certificate
          creds: ${{secrets.creds}}
          #
          # 2. OIDC (OpenID Connect): More secure, uses federated identity credentials
          #    Example:
          #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
          #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          #    enable-oidc: true
          #
          # Choose the appropriate method based on your security requirements
          # client-id: ${{ secrets.AZURE_CLIENT_ID }}
          # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # Uncomment next line to use OIDC
          # enable-oidc: true
      - name: install-extension
        run: az extension add -n ml -y
      - name: update-extension
        run: az extension update -n ml
      - name: run-ml-pipeline
        run: |
          echo "🔍 Starting ML pipeline execution..."
          echo "📁 Pipeline file: ${{ github.workspace }}/${{ inputs.parameters-file }}"
          echo "🏢 Resource Group: ${{ inputs.resource_group }}"
          echo "🏭 Workspace: ${{ inputs.workspace_name }}"
          
          # Create the job and capture the run_id, filtering out warnings
          echo "🚀 Creating ML job..."
          run_id=$(az ml job create --file ${{ github.workspace }}/${{ inputs.parameters-file }} --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query name -o tsv 2>&1 | grep -v "AutoDeleteSettingSchema\|AutoDeleteConditionSchema\|BaseAutoDeleteSettingSchema\|IntellectualPropertySchema\|ProtectionLevelSchema\|BaseIntellectualPropertySchema" | tail -1)
          
          if [[ -z "$run_id" || "$run_id" == *"Class"* || "$run_id" == *"experimental"* ]]
          then
            echo "❌ ERROR: Job creation failed or invalid run_id captured"
            echo "DEBUG: Command output: $run_id"
            echo "🔍 Checking workspace connectivity..."
            az ml workspace show --name ${{ inputs.workspace_name }} --resource-group ${{ inputs.resource_group }} || echo "❌ Cannot access workspace"
            echo "🔍 Checking compute targets..."
            az ml compute list --workspace-name ${{ inputs.workspace_name }} --resource-group ${{ inputs.resource_group }} || echo "❌ Cannot list compute targets"
            exit 1
          fi
          
          echo "✅ Job created successfully with ID: $run_id"
          
          # Show job details and web link
          echo "🔗 Job details and web link:"
          az ml job show -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --web 
          
          # Get initial status
          status=$(az ml job show -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
          if [[ -z "$status" ]]
          then
            echo "❌ ERROR: Status query failed"
            echo "🔍 Checking job details..."
            az ml job show -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }}
            exit 1
          fi
          
          echo "📊 Initial job status: $status"
          
          # Define running states
          running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")
          
          # Monitor job status
          echo "⏳ Monitoring job status..."
          while [[ ${running[*]} =~ $status ]]
          do
            sleep 30  # Increased sleep time to reduce API calls
            status=$(az ml job show -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
            echo "📊 Current status: $status"
            
            # Add timeout protection (2 hours)
            if [[ $SECONDS -gt 7200 ]]; then
              echo "⏰ Timeout reached (2 hours). Stopping monitoring."
              break
            fi
          done
          
          echo "🏁 Final job status: $status"
          
          if [[ "$status" != "Completed" ]]  
          then
            echo "❌ ERROR: Training Job failed or was canceled"
            echo "🔍 Getting detailed job information for debugging..."
            
            # Get detailed job information
            echo "📋 Job details:"
            az ml job show -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }}
            
            # Get job logs if available
            echo "📝 Attempting to get job logs..."
            az ml job download-logs -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --output logs || echo "⚠️ Could not download logs"
            
            # Check individual step statuses
            echo "🔍 Checking individual step statuses..."
            az ml job show -n "$run_id" --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query "jobs.*.status" -o table || echo "⚠️ Could not get step statuses"
            
            exit 1
          else
            echo "✅ Job completed successfully!"
            echo "🎉 Pipeline execution finished successfully"
          fi
